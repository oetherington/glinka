// glinka
// Copyright (C) 2021 Ollie Etherington
// <www.etherington.xyz>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

const std = @import("std");
const expectEqualStrings = std.testing.expectEqualStrings;
const Allocator = std.mem.Allocator;
const Backend = @import("backend.zig").Backend;
const Cursor = @import("../common/cursor.zig").Cursor;
const WriteContext = @import("../common/writer.zig").WriteContext;
const node = @import("../frontend/node.zig");
const Node = node.Node;

pub const JsBackend = struct {
    const WriteCtx = WriteContext(.{});

    backend: Backend,
    writeCtx: *WriteCtx,
    out: WriteCtx.Writer,

    pub fn new(alloc: *Allocator) !JsBackend {
        var ctx = try WriteCtx.new(alloc);
        return JsBackend{
            .backend = Backend{
                .callbacks = .{
                    .prolog = JsBackend.prolog,
                    .epilog = JsBackend.epilog,
                    .declaration = JsBackend.declaration,
                },
            },
            .writeCtx = ctx,
            .out = ctx.writer(),
        };
    }

    pub fn deinit(self: *JsBackend) void {
        self.writeCtx.deinit();
    }

    pub fn toString(self: JsBackend) ![]u8 {
        return try self.writeCtx.toString();
    }

    pub fn freeString(self: JsBackend, str: []u8) void {
        return self.writeCtx.freeString(str);
    }

    fn getSelf(be: *Backend) *JsBackend {
        return @fieldParentPtr(JsBackend, "backend", be);
    }

    fn prolog(be: *Backend) Backend.Error!void {
        const self = JsBackend.getSelf(be);
        try self.out.print("// Generated by glinka\n", .{});
    }

    fn epilog(be: *Backend) Backend.Error!void {
        const self = JsBackend.getSelf(be);
        try self.out.print("// End of glinka compilation", .{});
    }

    pub fn emitExpr(self: JsBackend, value: Node) Backend.Error!void {
        try switch (value.data) {
            .String => |s| self.out.print("{s}", .{s}),
            .Template => |t| self.out.print("{s}", .{t}),
            .True => self.out.print("true", .{}),
            .False => self.out.print("false", .{}),
            .Null => self.out.print("null", .{}),
            .Undefined => self.out.print("undefined", .{}),
            else => std.debug.panic(
                "Invalid Node type in emitExpr: {?}",
                .{value},
            ),
        };
    }

    pub fn emitDecl(
        self: JsBackend,
        ty: []const u8,
        decl: node.Decl,
    ) Backend.Error!void {
        try self.out.print("{s} {s}", .{ ty, decl.name });

        if (decl.value) |value| {
            try self.out.print(" = ", .{});
            try self.emitExpr(value);
        }

        try self.out.print(";\n", .{});
    }

    fn declaration(be: *Backend, nd: Node) Backend.Error!void {
        const self = JsBackend.getSelf(be);

        switch (nd.data) {
            .Var => |decl| try self.emitDecl("var", decl),
            .Let => |decl| try self.emitDecl("let", decl),
            .Const => |decl| try self.emitDecl("const", decl),
            else => std.debug.panic(
                "Invalid Node type generating declaration: {?}",
                .{nd},
            ),
        }
    }
};

test "JsBackend can emit prolog" {
    var backend = try JsBackend.new(std.testing.allocator);
    defer backend.deinit();
    try backend.backend.prolog();
    const str = try backend.toString();
    defer backend.freeString(str);
    try expectEqualStrings("// Generated by glinka\n", str);
}

test "JsBackend can emit epilog" {
    var backend = try JsBackend.new(std.testing.allocator);
    defer backend.deinit();
    try backend.backend.epilog();
    const str = try backend.toString();
    defer backend.freeString(str);
    try expectEqualStrings("// End of glinka compilation", str);
}

const ExprTestCase = struct {
    inputNode: Node,
    expectedOutput: []const u8,

    pub fn run(self: ExprTestCase) !void {
        var backend = try JsBackend.new(std.testing.allocator);
        defer backend.deinit();

        try backend.emitExpr(self.inputNode);

        const str = try backend.toString();
        defer backend.freeString(str);
        try expectEqualStrings(self.expectedOutput, str);

        std.testing.allocator.destroy(self.inputNode);
    }

    pub fn makeNode(comptime ty: node.NodeType, data: anytype) !Node {
        return try node.makeNode(
            std.testing.allocator,
            Cursor.new(0, 0),
            ty,
            data,
        );
    }
};

test "JsBackend can emit string expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.String, "'a test string'"),
        .expectedOutput = "'a test string'",
    }).run();
}

test "JsBackend can emit template expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.Template, "`a test template`"),
        .expectedOutput = "`a test template`",
    }).run();
}

test "JsBackend can emit 'true' expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.True, {}),
        .expectedOutput = "true",
    }).run();
}

test "JsBackend can emit 'false' expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.False, {}),
        .expectedOutput = "false",
    }).run();
}

test "JsBackend can emit 'null' expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.Null, {}),
        .expectedOutput = "null",
    }).run();
}

test "JsBackend can emit 'undefined' expression" {
    try (ExprTestCase{
        .inputNode = try ExprTestCase.makeNode(.Undefined, {}),
        .expectedOutput = "undefined",
    }).run();
}

fn DeclTestCase(comptime declType: node.NodeType) type {
    return struct {
        const This = @This();

        inputTy: []const u8,
        getData: fn (nd: Node) node.Decl,
        expectedOutput: []const u8,

        pub fn run(self: This) !void {
            var value = try This.makeNode(.Null, {});
            defer std.testing.allocator.destroy(value);

            var decl = try This.makeNode(
                declType,
                node.Decl.new("test", null, value),
            );
            defer std.testing.allocator.destroy(decl);

            var backend = try JsBackend.new(std.testing.allocator);
            defer backend.deinit();

            try backend.emitDecl(self.inputTy, self.getData(decl));

            const str = try backend.toString();
            defer backend.freeString(str);
            try expectEqualStrings(self.expectedOutput, str);
        }

        pub fn makeNode(comptime ty: node.NodeType, data: anytype) !Node {
            return try node.makeNode(
                std.testing.allocator,
                Cursor.new(0, 0),
                ty,
                data,
            );
        }

        pub fn getVar(nd: Node) node.Decl {
            return nd.data.Var;
        }

        pub fn getLet(nd: Node) node.Decl {
            return nd.data.Let;
        }

        pub fn getConst(nd: Node) node.Decl {
            return nd.data.Const;
        }
    };
}

test "JsBackend can emit var declaration" {
    const TestCase = DeclTestCase(.Var);
    try (TestCase{
        .inputTy = "var",
        .getData = TestCase.getVar,
        .expectedOutput = "var test = null;\n",
    }).run();
}

test "JsBackend can emit let declaration" {
    const TestCase = DeclTestCase(.Let);
    try (TestCase{
        .inputTy = "let",
        .getData = TestCase.getLet,
        .expectedOutput = "let test = null;\n",
    }).run();
}

test "JsBackend can emit const declaration" {
    const TestCase = DeclTestCase(.Const);
    try (TestCase{
        .inputTy = "const",
        .getData = TestCase.getConst,
        .expectedOutput = "const test = null;\n",
    }).run();
}
