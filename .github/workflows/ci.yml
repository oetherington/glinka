name: CI
on: [push]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Zig compiler
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Run linter
        run: make lint
  memory-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Zig compiler
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Install packages
        run: sudo apt-get install -y valgrind
      - name: Build Glinka debug binary
        run: |
          sed -i 's/exe\.install/exe.linkLibC();exe.install/' build.zig
          sed -i 's/gpa.allocator()/std.heap.c_allocator/' src/main.zig
          make debug
      - name: Run memory check
        run: |
          cd integration/tests
          for file in *.ts
          do
            valgrind  --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 ../../zig-out/bin/glinka $file
          done
  unit-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Zig compiler
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Run unit test suite
        run: make test
  code-coverage:
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ github.ref == 'refs/heads/main' && github.repository == 'oetherington/glinka' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Zig compiler
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Install packages
        run: sudo apt-get install -y kcov
      - name: Generate code coverage report
        run: make coverage
      - name: Commit to repo
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        run: |
          git config --global user.email "ollie@etherington.xyz"
          git config --global user.name "Ollie Etherington"
          git clone --single-branch --branch "main" "https://oetherington:$API_TOKEN_GITHUB@github.com/oetherington/glinka-code-coverage.git"
          cd glinka-code-coverage
          rm -rf docs
          cp -r ../kcov-output/test.* docs
          cd docs
          sed -i 's/\.\.\/data\/bcov\.css/data\/bcov.css/g' *.html
          git add ..
          git commit -m "Code coverage report for commit ${{ github.sha }}"
          git push -u origin $(git branch --show-current)
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            EXE: zig-out/bin/glinka
          - os: macos-latest
            EXE: zig-out/bin/glinka
          - os: windows-latest
            EXE: zig-out\bin\glinka.exe
    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Zig compiler
        uses: goto-bus-stop/setup-zig@v1
        with:
          version: master
      - name: Run optimised release build
        run: make release
      - name: Upload Glinka binary
        uses: actions/upload-artifact@v2
        with:
          name: glinka-${{ matrix.os }}-${{ github.sha }}
          path: ${{ matrix.EXE }}
  integration-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@master
      - name: Download Glinka binary
        uses: actions/download-artifact@master
        with:
          name: glinka-${{ matrix.os }}-${{ github.sha }}
          path: zig-out/bin
      - name: Make Glinka binary executable
        shell: bash
        run: if [ "$RUNNER_OS" != "Windows" ]; then sudo chmod +x zig-out/bin/glinka; fi
      - name: Install npm packages
        run: npm install --production=false
      - name: Run integration tests
        run: make integration
